# Basic {{{1
[[plugins]]
if = '''has('nvim')'''
repo = 'Shougo/deoplete.nvim'
depends = 'context_filetype.vim'
on_i = 1
# 起動時にdeopleteを有効にする
hook_source = 'let g:deoplete#enable_at_startup = 1'
# deoplete.nvim用の設定をロード
hook_post_source = 'source ~/deoplete.rc.vim'

[[plugins]]
if = '''has('vim')'''
repo = 'Shougo/neocomplete'
depends = 'context_filetype.vim'
on_i = 1

[[plugins]]
repo = 'Shougo/neosnippet'
depends = ['context_filetype.vim', 'neosnippet-snippets']
on_i = 1
on_ft = 'snippet'

[[plugins]]
repo = 'Shougo/neco-syntax'
on_i = 1

[[plugins]]
repo = 'kannokanno/previm'
on_i = 1

# 1}}}


# HTML / CSS {{{1
[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['css', 'html', 'sass', 'scss', 'jsx']
# 1}}}

# JavaScript {{{1
[[plugins]]
repo = 'pangloss/vim-javascript'
on_ft = 'javascript'

# TypeScript {{{1
[[plugins]]
repo = 'leafgarland/typescript-vim'

[[plugins]]
repo = 'peitalin/vim-jsx-typescript'

[[plugins]]
repo = 'maxmellon/vim-jsx-pretty'

# es6のハイライト
[[plugins]]
repo = 'othree/yajs.vim'
on_ft = 'javascript'
depends = 'vim-javascript'

[[plugins]]
repo = 'othree/javascript-libraries-syntax.vim'
on_ft = 'javascript'
depends = 'yajs.vim'

# stage-0 のsyntax highlight
[[plugins]]
repo = 'othree/es.next.syntax.vim'
on_ft = 'javascript'
depends = 'javascript-libraries-syntax.vim'

[[plugins]]
repo = 'mxw/vim-jsx'
on_ft = 'javascript'
depends = 'yajs.vim'

[[plugins]]
repo  = 'heavenshell/vim-jsdoc'
on_ft = 'javascript'


repo = 'fatih/vim-go'
on_ft = 'go'
hook_add = '''
    "  参考: https://github.com/hnakamur/vim-go-tutorial-ja

    " :nextなどでバッファ移動時にファイルが変更されていれば書き込む
    " :GoBuildするときにファイルを保存する必要がなくなる
    autocmd FileType go set autowrite

    " === VIM-GO COMMAND KEYBINDS ===
    " autocmd FileType go nmap <leader>b  <Plug>(go-build) " 下記に改善版
    autocmd FileType go nmap <leader>r <Plug>(go-run)
    autocmd FileType go nmap <leader>t <Plug>(go-test)
    autocmd FileType go nmap <Leader>c <Plug>(go-coverage-toggle)
    " run :GoBuild or :GoTestCompile based on the go file
    function! s:build_go_files()
      let l:file = expand('%')
      if l:file =~# '^\f\+_test\.go$'
        call go#test#Test(0, 1)
      elseif l:file =~# '^\f\+\.go$'
        call go#cmd#Build(0)
      endif
    endfunction
    autocmd FileType go nmap <leader>b :<C-u>call <SID>build_go_files()<CR>

    " ファイル切り替え
    " チュートリアルのおすすめキーバインド
    autocmd Filetype go command! -bang A call go#alternate#Switch(<bang>0, 'edit')
    autocmd Filetype go command! -bang AV call go#alternate#Switch(<bang>0, 'vsplit')
    autocmd Filetype go command! -bang AS call go#alternate#Switch(<bang>0, 'split')
    autocmd Filetype go command! -bang AT call go#alternate#Switch(<bang>0, 'tabe')
    " 自分専用キーバインド(^とpが近いので)
    autocmd FileType go nmap <Leader>pp <Plug>(go-alternate-edit)
    autocmd FileType go nmap <Leader>ps <Plug>(go-alternate-split)
    autocmd FileType go nmap <Leader>pv <Plug>(go-alternate-vertical)
    " tabに表示はない

    " [[, ]]: 次/前の関数に移動
    " (go組込関数上などで)K: :GoDocと同様

    " === VIM-GO OPTIONS ===
    " GoRunの結果をsplitで表示 Default->"vsplit"
    let g:go_term_mode = "split"

    " :GoFmt時にimportのチェック Default->gofmt
    " ファイルが巨大だと保存時の:GoFmtが遅くなるので消しましょう
    let g:go_fmt_command = "goimports"

    " "コメントも関数の一部として扱われたくないときは0に設定する Default=>1
    " let g:go_textobj_include_function_doc = 1

    " キャメルケースに変換(defalut snake_cake)
    let g:go_addtags_transform = "camelcase"

    " :GoMetaLinterで呼び出すコマンド Default->['vet', 'golint', 'errcheck']
    " let g:go_metalinter_enabled = ['vet', 'golint', 'errcheck']

    " 自動保存時にLinter有効化 Default->0
    let g:go_metalinter_autosave = 1

    " 自動保存時に走らせるLinter Default->['vet', 'golint']
    " let g:go_metalinter_autosave_enabled = ['vet', 'golint']

    " 自動保存時に走らせるLinterタイムアウト Default->"5s"
    " let g:go_metalinter_deadline = "5s"

    " :GoDef使用時に使うコマンド ['guru', 'godef'] guru使えないときはgodefに切り替える
    " Default->'guru
    " let g:go_def_mode = 'guru'

    " :GoDeclsはデフォルトで関数と型を表示する Default->"func,type"
    " 型だけにしたいときは"func"だけを指定
    " let g:go_decls_includes = "func,type"

    " カーソル上のワードに対して:GoInfo実行
    let g:go_auto_type_info = 1
    " :GoInfo更新時間 Default->800
    autocmd FileType go set updatetime=100
    " または:GoInfoのキーバインドを設定
    " autocmd FileType go nmap <Leader>i <Plug>(go-info)

    " 同じIDをカーソルがワードに移動するごとにハイライト Default->0
    " let g:go_auto_sameids = 1
    " または:GoSameIdsToggleのキーバインドを設定
    autocmd FileType go nmap <Leader>s :GoSameIdsToggle<CR>

    " :GoPlayでページをブラウザに読み込まない Default->1
    let g:go_play_open_browser = 0
'''

[[plugins]]  # go completion
repo = 'zchee/deoplete-go'
build = 'make'
on_ft = 'go'
depends = ['deoplete.nvim']
hook_source = '''
    let g:deoplete#sources#go#gocode_binary = $GOPATH . '/bin/gocode'
'''
